[{"title":"Hexo+Github，搭建属于自己的博客","date":"2017-02-07T03:15:58.000Z","path":"2017/02/07/hexo-github/","text":"正文： hexo是一款基于Node.js的静态博客框架, hexo github链接 ,这篇教程是针对与Mac的，参考链接，由于原文讲到的hexo是以前的老版本，所以现在的版本配置的时候会有些改动。 之前是想着写博客，一方面是给自己做笔记，可以提升自己的写作、总结能力，一个技术点我们会使用，并不难，但是要做到让让别人也能听懂我们讲得，还是需要一定的技巧和经验的。很多类似于CSDN、博客园也都可以写文章，但是页面的样式我，不是太喜欢，简书还算好点得。最近看到一些大神们的博客,貌似都是用hexo写得,我也依葫芦画瓢的搭建了一个。不罗嗦了，直接上搭建步骤。 配置文件安装Node（必须）作用：用来生成静态页面的到Node.js官网官网下载相应平台的最新版本，一路安装即可。安装Git（必须）作用：把本地的hexo内容提交到github上去.安装Xcode就自带有Git，我就不多说了。申请GitHub（必须）作用：是用来做博客的远程创库、域名、服务器之类的，怎么与本地hexo建立连接等下讲。github账号我也不再啰嗦了,没有的话直接申请就行了，跟一般的注册账号差不多，SSH Keys，看你自己了，可以不配制，不配置的话以后每次对自己的博客有改动提交的时候就要手动输入账号密码，配置了就不需要了，怎么配置我就不多说了，网上有很多教程。 正式安装HexoNode和Git都安装好后,首先创建一个文件夹,如blog,用户存放hexo的配置文件,然后进入blog里安装Hexo。执行如下命令安装Hexo：sudo npm install -g hexo 初始化然后，执行init命令初始化hexo,命令：hexo init 好啦，至此，全部安装工作已经完成！blog就是你的博客根目录，所有的操作都在里面进行。生成静态页面hexo generate（hexo g也可以） 本地启动启动本地服务，进行文章预览调试，命令：hexo server 浏览器输入http://localhost:4000我不知道你们能不能，反正我不能，因为我还有环境没配置好 配置Github建立Repository建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法然后建立关联，我的blog在本地/Users/leopard/blog，blog是我之前建的东西也全在这里面，有： _config.yml node_modules public source db.json package.json scaffolds themes 现在我们需要_config.yml文件，来建立关联，命令：vim _config.yml 翻到最下面，改成我这样子的deploy: type: git repo: https://github.com/leopardpan/leopardpan.github.io.git branch: master 然后执行命令：npm install hexo-deployer-git –save 网上会有很多说法，有的type是github, 还有repository最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.1.1，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。忘了说了，我没用SSH Keys如果你用了SSH Keys的话直接在github里复制SSH的就行了，总共就两种协议，相信你懂的。然后，执行配置命令：hexo deploy 然后再浏览器中输入http://leopardpan.github.io/ 就行了，我的github的账户叫leopardpan,把这个改成你github的账户名就行了部署步骤每次部署的步骤，可按以下三步来进行。 hexo clean hexo generate hexo deploy 一些常用命令：hexo new”postName” #新建文章hexo new page”pageName” #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）hexo deploy #将.deploy目录部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 报错总结ERROR Deployer not found: git 或者 ERROR Deployer not found: github解决方法： npm install hexo-deployer-git –save 如发生报错： ERROR Process failed: layout/.DS_Store , 那么进入主题里面layout和_partial目录下，使用删除命令：rm-rf.DS_Store ERROR Plugin load failed: hexo-server原因：Besides,utilities are separated into a standalone module.hexo.util is not reachable anymore.解决方法，执行命令：sudo npm install hexo-server 执行命令hexo server，提示：Usage: hexo ….原因：我认为是没有生成本地服务解决方法，执行命令：npm install hexo-server –save 提示：hexo-server@0.1.2 node_modules/hexo-server 表示成功了参考这个时候再执行：hexo-server 得到:INFOHexois running at http://0.0.0.0:4000/. PressCtrl+C to stop.这个时候再点击http://0.0.0.0:4000， 正常情况下应该是最原始的画面，但是我看到的是：白板和Cannot GET / 几个字原因：由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令： npm install hexo-renderer-ejs –save npm install hexo-renderer-stylus –save npm install hexo-renderer-marked –save 这个时候再重新生成静态文件，命令：hexo generate（或hexo g） 启动本地服务器：hexo server（或hexo s） 再，点击网址http://0.0.0.0:4000 OK终于可以看到属于你自己的blog啦，😄，虽然很简陋，但好歹有了一个属于自己的小窝了。参考链接，本地已经简单的设置好了，但是现在域名和服务器都是基于自己的电脑，接下来需要跟github进行关联。 主题推荐这里有大量的主题列表主题列表使用方法里面都有详细的介绍，我就不多说了。 一些基本路径文章在source/_posts, 文章支持Markdown语法，可以使用一些MarkDown渲染工具。如果想修改头像可以直接在主题的_config.yml文件里面修改，友情链接，之类的都在这里。开始打理你的博客吧，有什么问题或者建议，都可以提出来，我会继续完善的。 修改头像我当前的路径/Users/leopard/blog/themes/yilia，ls 你可以看到Gruntfile.js _config.yml package.json README.md layout sourcevim _config.yml 进去，找到 #你的头像url avatar: 后接一个URL就行了，头像就修改成功了修改主题和作者名字我当前的路径/Users/leopard/blog，ls 你可以看到_config.yml node_modules public source themes db.json package.json scaffolds ssh-keygenvim _config.yml 进去，找到 author: 潘柏信，修改成你自己的名字就行了修改主题，然后继续往下找到 ExtensionsPlugins: http://hexo.io/plugins/Themes: http://hexo.io/themes/theme:yilia改成theme: yilia，theme:后面接你自己的主题名字就行了,然后分别执行部署 hexo g提交 hexo d你的主题，和名字就修改成功了Markdown语法参考链接链接1 转载地址：潘柏信的博客：http://leopardpan.github.io","comments":true,"tags":[{"name":"-技术相关","slug":"技术相关","permalink":"http://yoursite.com/tags/技术相关/"}]},{"title":"css","date":"2017-02-07T02:12:40.000Z","path":"2017/02/07/css/","text":"1.新建代码库在当前目录新建一个Git代码库git init 新建一个目录，将其初始化为Git代码库git init [project-name] 下载一个项目和它的整个代码历史git clone [url]","comments":true,"tags":[{"name":"-技术相关","slug":"技术相关","permalink":"http://yoursite.com/tags/技术相关/"}]},{"title":"git常用命令整理","date":"2017-02-06T01:32:07.000Z","path":"2017/02/06/git/","text":"1.新建代码库在当前目录新建一个Git代码库git init 新建一个目录，将其初始化为Git代码库git init [project-name] 下载一个项目和它的整个代码历史git clone [url] 2.配置 Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。显示当前的Git配置git config –list 编辑Git配置文件git config -e [–global] 设置提交代码时的用户信息git config [–global] user.name “[name]”git config [–global] user.email “[email address]” 3.增加/删除文件添加指定文件到暂存区git add [file1] [file2] … 添加指定目录到暂存区，包括子目录git add [dir] 添加当前目录的所有文件到暂存区git add . 添加每个变化前，都会要求确认对于同一个文件的多处变化，可以实现分次提交git add -p 删除工作区文件，并且将这次删除放入暂存区git rm [file1] [file2] … 停止追踪指定文件，但该文件会保留在工作区git rm –cached [file] 改名文件，并且将这个改名放入暂存区git mv [file-original] [file-renamed] 4.代码提交提交暂存区到仓库区git commit -m [message] 提交暂存区的指定文件到仓库区git commit [file1] [file2] … -m [message] 提交工作区自上次commit之后的变化，直接到仓库区git commit -a 提交时显示所有diff信息git commit -v 使用一次新的commit，替代上一次提交如果代码没有任何新变化，则用来改写上一次commit的提交信息git commit –amend -m [message] 重做上一次commit，并包括指定文件的新变化git commit –amend [file1] [file2] … 5.分支列出所有本地分支git branch 列出所有远程分支git branch -r 新建一个分支，但依然停留在当前分支git branch [branch-name] 新建一个分支，并切换到该分支git checkout -b [branch] 新建一个分支，指向指定commitgit branch [branch] [commit] 新建一个分支，与指定的远程分支建立追踪关系git branch –track [branch] [remote-branch] 切换到指定分支，并更新工作区git checkout [branch-name] 切换到上一个分支git checkout - 建立追踪关系，在现有分支与指定的远程分支之间git branch –set-upstream [branch] [remote-branch] 合并指定分支到当前分支git merge [branch] 选择一个commit，合并进当前分支git cherry-pick [commit] 删除分支git branch -d [branch-name] 删除远程分支git push origin –delete [branch-name]git branch -dr [remote/branch] 6.标签列出所有taggit tag 新建一个tag在当前commitgit tag [tag] 新建一个tag在指定commitgit tag [tag] [commit] 删除本地taggit tag -d [tag] 删除远程taggit push origin :refs/tags/[tagName] 查看tag信息git show [tag] 提交指定taggit push [remote] [tag] 提交所有taggit push [remote] –tags 新建一个分支，指向某个taggit checkout -b [branch] [tag] 7.查看信息显示有变更的文件git status 显示当前分支的版本历史git log 显示commit历史，以及每次commit发生变更的文件git log –stat 搜索提交历史，根据关键词git log -S [keyword] 显示某个commit之后的所有变动，每个commit占据一行git log [tag] HEAD –pretty=format:%s 显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件git log [tag] HEAD –grep feature 显示某个文件的版本历史，包括文件改名git log –follow [file]git whatchanged [file] 显示指定文件相关的每一次diffgit log -p [file] 显示过去5次提交git log -5 –pretty –oneline 显示所有提交过的用户，按提交次数排序git shortlog -sn 显示指定文件是什么人在什么时间修改过git blame [file] 显示暂存区和工作区的差异git diff 显示暂存区和上一个commit的差异git diff –cached [file] 显示工作区与当前分支最新commit之间的差异git diff HEAD 显示两次提交之间的差异git diff [first-branch]…[second-branch] 显示今天你写了多少行代码git diff –shortstat “@{0 day ago}” 显示某次提交的元数据和内容变化git show [commit] 显示某次提交发生变化的文件git show –name-only [commit] 显示某次提交时，某个文件的内容git show [commit]:[filename] 显示当前分支的最近几次提交git reflog 8.远程同步下载远程仓库的所有变动git fetch [remote] 显示所有远程仓库git remote -v 显示某个远程仓库的信息git remote show [remote] 增加一个新的远程仓库，并命名git remote add [shortname] [url] 取回远程仓库的变化，并与本地分支合并git pull [remote] [branch] 上传本地指定分支到远程仓库git push [remote] [branch] 强行推送当前分支到远程仓库，即使有冲突git push [remote] –force 推送所有分支到远程仓库git push [remote] –all 9.撤销恢复暂存区的指定文件到工作区git checkout [file] 恢复某个commit的指定文件到暂存区和工作区git checkout [commit] [file] 恢复暂存区的所有文件到工作区git checkout . 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变git reset [file] 重置暂存区与工作区，与上一次commit保持一致git reset –hard 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变git reset [commit] 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致git reset –hard [commit] 重置当前HEAD为指定commit，但保持暂存区和工作区不变git reset –keep [commit] 新建一个commit，用来撤销指定commit后者的所有变化都将被前者抵消，并且应用到当前分支git revert [commit] 暂时将未提交的变化移除，稍后再移入git stashgit stash pop 10.其他生成一个可供发布的压缩包git archive","comments":true,"tags":[{"name":"-技术相关","slug":"技术相关","permalink":"http://yoursite.com/tags/技术相关/"}]}]