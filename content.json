[{"title":"git常用命令整理","date":"2017-02-06T01:32:07.000Z","path":"2017/02/06/firstexample/","text":"1.新建代码库在当前目录新建一个Git代码库git init 新建一个目录，将其初始化为Git代码库git init [project-name] 下载一个项目和它的整个代码历史git clone [url] 2.配置 Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。显示当前的Git配置git config –list 编辑Git配置文件git config -e [–global] 设置提交代码时的用户信息git config [–global] user.name “[name]”git config [–global] user.email “[email address]” 3.增加/删除文件添加指定文件到暂存区git add [file1] [file2] … 添加指定目录到暂存区，包括子目录git add [dir] 添加当前目录的所有文件到暂存区git add . 添加每个变化前，都会要求确认对于同一个文件的多处变化，可以实现分次提交git add -p 删除工作区文件，并且将这次删除放入暂存区git rm [file1] [file2] … 停止追踪指定文件，但该文件会保留在工作区git rm –cached [file] 改名文件，并且将这个改名放入暂存区git mv [file-original] [file-renamed] 4.代码提交提交暂存区到仓库区git commit -m [message] 提交暂存区的指定文件到仓库区git commit [file1] [file2] … -m [message] 提交工作区自上次commit之后的变化，直接到仓库区git commit -a 提交时显示所有diff信息git commit -v 使用一次新的commit，替代上一次提交如果代码没有任何新变化，则用来改写上一次commit的提交信息git commit –amend -m [message] 重做上一次commit，并包括指定文件的新变化git commit –amend [file1] [file2] … 5.分支列出所有本地分支git branch 列出所有远程分支git branch -r 新建一个分支，但依然停留在当前分支git branch [branch-name] 新建一个分支，并切换到该分支git checkout -b [branch] 新建一个分支，指向指定commitgit branch [branch] [commit] 新建一个分支，与指定的远程分支建立追踪关系git branch –track [branch] [remote-branch] 切换到指定分支，并更新工作区git checkout [branch-name] 切换到上一个分支git checkout - 建立追踪关系，在现有分支与指定的远程分支之间git branch –set-upstream [branch] [remote-branch] 合并指定分支到当前分支git merge [branch] 选择一个commit，合并进当前分支git cherry-pick [commit] 删除分支git branch -d [branch-name] 删除远程分支git push origin –delete [branch-name]git branch -dr [remote/branch] 6.标签列出所有taggit tag 新建一个tag在当前commitgit tag [tag] 新建一个tag在指定commitgit tag [tag] [commit] 删除本地taggit tag -d [tag] 删除远程taggit push origin :refs/tags/[tagName] 查看tag信息git show [tag] 提交指定taggit push [remote] [tag] 提交所有taggit push [remote] –tags 新建一个分支，指向某个taggit checkout -b [branch] [tag] 7.查看信息显示有变更的文件git status 显示当前分支的版本历史git log 显示commit历史，以及每次commit发生变更的文件git log –stat 搜索提交历史，根据关键词git log -S [keyword] 显示某个commit之后的所有变动，每个commit占据一行git log [tag] HEAD –pretty=format:%s 显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件git log [tag] HEAD –grep feature 显示某个文件的版本历史，包括文件改名git log –follow [file]git whatchanged [file] 显示指定文件相关的每一次diffgit log -p [file] 显示过去5次提交git log -5 –pretty –oneline 显示所有提交过的用户，按提交次数排序git shortlog -sn 显示指定文件是什么人在什么时间修改过git blame [file] 显示暂存区和工作区的差异git diff 显示暂存区和上一个commit的差异git diff –cached [file] 显示工作区与当前分支最新commit之间的差异git diff HEAD 显示两次提交之间的差异git diff [first-branch]…[second-branch] 显示今天你写了多少行代码git diff –shortstat “@{0 day ago}” 显示某次提交的元数据和内容变化git show [commit] 显示某次提交发生变化的文件git show –name-only [commit] 显示某次提交时，某个文件的内容git show [commit]:[filename] 显示当前分支的最近几次提交git reflog 8.远程同步下载远程仓库的所有变动git fetch [remote] 显示所有远程仓库git remote -v 显示某个远程仓库的信息git remote show [remote] 增加一个新的远程仓库，并命名git remote add [shortname] [url] 取回远程仓库的变化，并与本地分支合并git pull [remote] [branch] 上传本地指定分支到远程仓库git push [remote] [branch] 强行推送当前分支到远程仓库，即使有冲突git push [remote] –force 推送所有分支到远程仓库git push [remote] –all 9.撤销恢复暂存区的指定文件到工作区git checkout [file] 恢复某个commit的指定文件到暂存区和工作区git checkout [commit] [file] 恢复暂存区的所有文件到工作区git checkout . 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变git reset [file] 重置暂存区与工作区，与上一次commit保持一致git reset –hard 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变git reset [commit] 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致git reset –hard [commit] 重置当前HEAD为指定commit，但保持暂存区和工作区不变git reset –keep [commit] 新建一个commit，用来撤销指定commit后者的所有变化都将被前者抵消，并且应用到当前分支git revert [commit] 暂时将未提交的变化移除，稍后再移入git stashgit stash pop 10.其他生成一个可供发布的压缩包git archive","comments":true,"tags":[]},{"title":"Hello World","date":"2017-02-04T07:18:42.465Z","path":"2017/02/04/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","comments":true,"tags":[]}]