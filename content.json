[{"title":"apicloud+jquery+vue组合式开发","date":"2017-02-22T09:11:58.000Z","path":"2017/02/22/apicloud-vue-jquery/","text":"1.初始化项目以及相关命令操作首先初始化一个项目cnpm init 安装相关插件cnpm install jquery bootstrap@4.0.0-alpha.6 vue font-awesome swiper –save 开启php服务器，以便在pc端查看代码php -S localhost:9000 进入指定文件夹进行命令操作cd ../project 进入父级文件夹cd ./project 进入同级目录文件夹 用sublime打开文件夹/文件subl filesubl project/filesubl ../projectsubl ./project 运用subl打开文件的配置：1.复制sublime文件夹在电脑中的目录2.进入目录复制文件路径3.计算机右击属性→高级系统设置→环境变量→选中系统变量中的Path→点击下方的新建→复制路径→确定 2.apicloud-cli 工具使用说明 安装说明稳定版安装：npm install -g apicloud-cli apicloud-cli指令集全局命令示例 显示版本号：apicloud version 或 apicloud -v 或 apicloud –version 显示帮助信息：apicloud help 启动wifi服务：apicloud wifiStart –port 8686注：开启wifi后不要关闭，然后新建一个终端命令窗口，其他操作在新窗口执行 停止wifi服务：apicloud wifiStart –port 8686 wifi增量更新apicloud wifiSync –project ./ –updateAll false –port 8686 wifi全量更新apicloud wifiSync –project ./ –updateAll false –port 8686 注：更新也可在sublime里面设置，首选项&gt;浏览程序包&gt;User&gt;apicloud-wifiSync.sublime-build然后把文件放在sublime里面秀该true/false wifi预览：apicloud wifiPreview –file ./index.html –port 8686 获取wifi信息：apicloud wifiInfo –port 8686 获取wifi调试日志：apicloud wifiLog -port 8686 创建应用模板apicloud init –name HelloAPICloud –template hoe –worksapce ./ 注：可选模板：default,bottom,home,slide 创建页面模板：apicloud initPage –name first_page –template page001 –project ./ 注：目前支持的页面模板为：page001,page002,page003,page004,page005,page006,page007,page008,page009,page010,page011,page012,page013,page014,page015,page016,page017,page018,page019,page020,page021,page022,page023,page024,page025,page026","comments":true,"tags":[{"name":"-技术相关","slug":"技术相关","permalink":"http://yoursite.com/tags/技术相关/"}]},{"title":"vue组件使用","date":"2017-02-15T07:45:20.000Z","path":"2017/02/15/vue-zujian/","text":"什么是组件？组件（Component）是Vue.js最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素， Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。 组件开发环境安装在用 Vue.js构建大型应用时推荐使用NPM安装，NPM能很好地和诸如 Webpack 或 Browserify 模块打包器配合使用。 Vue.js 也提供配套工具来开发单文件组件。#最新稳定版$ npm install vue 命令行工具Vue.js 提供一个官方命令行工具，可用于快速搭建大型单页应用。该工具提供开箱即用的构建工具配置，带来现代化的前端开发流程。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目： #全局安装 vue-cli$ npm install –global vue-cli #创建一个基于 webpack 模板的新项目$ vue init webpack my-project #安装依赖，走你$ cd my-project$ npm install$ npm run dev 上面的代码运行完之后，一个vue实例的雏形聚创建完成了，下面我们进行组件的使用,下面进入main.js文件","comments":true,"tags":[{"name":"-技术相关","slug":"技术相关","permalink":"http://yoursite.com/tags/技术相关/"}]},{"title":"npm常用快捷键整理","date":"2017-02-15T05:51:26.000Z","path":"2017/02/15/npm/","text":"npm是什么NPM的全称是Node Package Manager，是随同NodeJS一起安装的包管理和分发工具，它很方便让JavaScript开发者下载、安装、上传以及管理已经安装的包。npm install 安装模块 安装包，默认安装最新的版本npm install gulp 安装指定版本npm install gulp@3.9.1 -S, –save 安装包信息将加入到dependencies（生产阶段的依赖）npm install gulp –save 或 npm install gulp -S package.json 文件的 dependencies 字段：“dependencies”: { “gulp”: “^3.9.1”} -D, –save-dev 安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它npm install gulp –save-dev 或 npm install gulp -D package.json 文件的 devDependencies字段：“devDependencies”: { “gulp”: “^3.9.1”} -O, –save-optional安装包信息将加入到optionalDependencies（可选阶段的依赖）npm install gulp –save-optional 或 npm install gulp -O package.json 文件的optionalDependencies字段：“optionalDependencies”: { “gulp”: “^3.9.1”} -E, –save-exact 精确安装指定模块版本npm install gulp –save-exact 或 npm install gulp -E 输入命令npm install gulp -ES，留意package.json 文件的 dependencies 字段，以看出版本号中的^消失了“dependencies”: { “gulp”: “3.9.1”} 模块的依赖都被写入了package.json文件后，他人打开项目的根目录（项目开源、内部团队合作），使用npm install命令可以根据dependencies配置安装所有的依赖包npm install 本地安装（local）npm install gulp 全局安装（global）,使用 -g 或 –globalnpm install gulp -g npm uninstall 卸载模块 如卸载开发版本的模块npm uninstall gulp –save-dev npm update 更新模块 如卸载开发版本的模块npm uninstall gulp –save-dev npm update 更新模块 npm ls 查看安装的模块查看全局安装的模块及依赖npm ls -g npm init 在项目中引导创建一个package.json文件安装包的信息可保持到项目的package.json文件中，以便后续的其它的项目开发或者他人合作使用，也说package.json在项目中是必不可少的。npm init [-f|–force|-y|–yes] npm help 查看某条命令的详细帮助 例如输入npm help install，系统在默认的浏览器或者默认的编辑器中打开本地nodejs安装包的文件/nodejs/node_modules/npm/html/doc/cli/npm-install.htmlnpm help install npm root 查看包的安装路径输出 node_modules的路径npm root [-g] npm config 管理npm的配置路径 对于config这块用得最多应该是设置代理，解决npm安装一些模块失败的问题例如我在公司内网，因为公司的防火墙原因，无法完成任何模块的安装，这个时候设置代理可以解决npm config set proxy=http://dev-proxy.oa.com:8080ll 又如国内的网络环境问题，某官方的IP可能被和谐了，幸好国内有好心人，搭建了镜像，此时我们简单设置镜像npm config set registry=”http://r.cnpmjs.org“ 也可以临时配置，如安装淘宝镜像npm install -g cnpm –registry=https://registry.npm.taobao.org npm cache管理模块的缓存最常用命令无非清除npm本地缓存npm cache clean npm start 启动模块该命令写在package.json文件scripts的start字段中，可以自定义命令来配置一个服务器环境和安装一系列的必要程序，如“scripts”: { “start”: “gulp -ws”} 此时在cmd中输入npm start命令相当于执行gulpfile.js文件自定义的watch和server命令。 如果package.json文件没有设置start，则将直接启动node server.js npm stop 停止模块基础语法npm stop [-- &lt;args&gt;] npm restart 重新启动模块基础语法npm restart [-- &lt;args&gt;] npm test 测试模块基础语法npm test [-- &lt;args&gt;]npm tst [-- &lt;args&gt;] 该命令写在package.json文件scripts的test字段中，可以自定义该命令来执行一些操作，如“scripts”: { “test”: “gulp release”}, 此时在cmd中输入npm test命令相当于执行gulpfile.js文件自定义的release命令。 npm version 查看模块版本s查看模块的版本npm version npm view 查看模块的注册信息查看模块的依赖关系npm view gulp dependencies 查看模块的源文件地址npm view gulp repository.url 查看模块的贡献者，包含邮箱地址npm view npm contributors npm adduser 用户登录基础语法npm adduser [–registry=url] [--scope=@orgname][–always-auth] 发布模板到npm社区前需要先登录，然后再进入发布的操作 npm publish 发布模块基础语法npm publish [&lt;tarball&gt;|&lt;folder&gt;] [--tag &lt;tag&gt;] [--access &lt;public|restricted&gt;] Publishes ‘.’ if no argument suppliedSets tag ‘latest’ if no –tag specified npm access 在发布的包上设置访问级别npm access public []npm access restricted [] npm access grant []npm access revoke [] npm access ls-packages [&lt;user&gt;|&lt;scope&gt;|&lt;scope:team&gt;]npm access ls-collaborators [&lt;package&gt; [&lt;user&gt;]]npm access edit []","comments":true,"tags":[{"name":"-技术相关","slug":"技术相关","permalink":"http://yoursite.com/tags/技术相关/"}]},{"title":"vue使用笔记","date":"2017-02-13T09:10:56.000Z","path":"2017/02/13/vue/","text":"vue组件中引入另一个组件说明：App.vue是vue文件的入口文件，当你你也可以在main.js里面修改，建议不要改掉入口文件，而是从App.vue中引入其他子组件1.首先新建一个名为News.vue的新组件注：文件命名最好采用该首字母为大写的驼峰命名2.在New.vue文中输入以下代码打开插件列表ctrl shift p 输入vue,如果安装了vue的插件会出现关于vue的列表，如果没有出现vue列表请自行安装这里是News.vue里面的内容，这里只是简单的示例点击列表中的第一个Vue Component，这样组件模板就安装就新建成功了3.在Vue.app(父模板)中引入子模板（News.vue）首先要引入子模板import News from ‘./News.vue’注：这里News的名称最好跟子模板的文件名称对称 然后进行注册components:{ News},注：这里News是跟上面引入的子模板一致","comments":true,"tags":[{"name":"-技术相关","slug":"技术相关","permalink":"http://yoursite.com/tags/技术相关/"}]},{"title":"终端代码用sublime打开文件夹","date":"2017-02-13T08:53:10.000Z","path":"2017/02/13/sublime/","text":"1.右击sublime快捷键，打开文件夹所在目录2.进入目录复制文件路径3.计算机右击属性→高级系统设置→环境变量→选中系统变量中的Path→点击下方的新建→复制路径→确定","comments":true,"tags":[{"name":"-技术相关","slug":"技术相关","permalink":"http://yoursite.com/tags/技术相关/"}]},{"title":"关于友情的小故事","date":"2017-02-10T06:26:56.000Z","path":"2017/02/10/friend/","text":"小学一个同学，班里最调皮捣蛋的，就是大家常说的一粒老鼠屎毁了一锅粥的老鼠屎那种，特别让老师头疼，同学都很害怕他，说来也奇怪，我就喜欢跟他玩。他问我：“你成绩那么好，为什么要跟我玩？”我回答他：“我看不惯那些学习好但是很虚伪的人，你比较真诚。”初中也是同学，一次思想品德课，老师让我们每个人给班里一个你最想夸奖的人写一句话，班上五十多个人，我收到三十多句话，印象最深的一句话就是他写的：“我这么坏，你还愿意做我朋友。”他初三就辍学了，临走前，他跟我说：“你要好好学习，要考好大学，以后谁敢欺负你你就告诉我，我打不死他，哥走了…”高中，大学没有他的消息，读研的时候他通过别的同学得到我微信号，也没有找我聊天，只是我的每一条状态他都点了赞，有次我问他：“你加我好友为什么不找我说话？”他说：“我不好意思找你，你是高材生，我怕你瞧不起我。” 对了，他结婚了，儿子叫忆锐，锐是我的名字… 作者：一直炸毛的猫链接：https://www.zhihu.com/question/21149829/answer/140793060来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","comments":true,"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"每日一笑","date":"2017-02-08T05:21:22.000Z","path":"2017/02/08/joke/","text":"No.1小学的时候，上数学课，发考试试卷，我知道我肯定没考好，结果发着发着，我被吓尿了……是真尿了，滴答滴答的……尴尬地一匹，然后同桌把他喝的水直接倒到我裤子上，直对我说对不起，对不起……这一刻，我看到了人性的光辉…… No.2第一个登上月球的宇航员阿姆斯特朗说了举世闻名的一句话：“一个人的一小步，却是人类的一大步”。在他返回登陆舱时，他说了一句莫名其妙的话：“祝你好运，戈斯基先生。”美国宇航局的大多数人都以为这句话没什么深意，可能是指某个苏联宇航员。可是查来查去，苏联或美国宇航局都没有这么一个人。之后每年都有很多人问阿姆斯特朗“祝你好运，戈斯基先生”这句话有什么含义，他都笑而不答。1995年7月5日在弗洛里达TampaBay,一个记者又把这个问了26年之久的问题捅出来，这次阿姆斯特朗终于开口了。戈斯基先生不久前去世了，阿姆斯特朗觉得他可以回答了。当他还是小孩的时候，有一天，他和朋友在院子里玩棒球。他的朋友把球打到邻居戈斯基夫妇家窗户下面。阿姆斯特朗弯腰拣球的时候听见他们夫妇在吵架，戈斯基太太大声嚷着说：“你想跟我上床？休想！除非邻居家的小孩登上月球！” No.3一女生因上课迟到被罚操场跑圈，不料天下起雨，女生只得淋雨跑步。这是一个男生撑着伞到她身边一同跑步，并把伞移到女生头顶。女生认出男生已经在一旁注视她好久，瞬间脸就红了，低声不好意思说：“对不起，我有男朋友了……”男生低头沉思了一下，深情地对女生说：“要吗？这伞十块…….. No.4唐僧师徒四人一起去取经，沙僧是个细心的人，一路上照顾大家的饮食起居。这天，他整理大师兄的内裤，发现有个洞，然后就缝了起来；第二天发现又有个洞，于是又补了起来；第三天依旧还是有个洞，正当他拿起针线时，猴哥过来，一脚踹飞了沙僧。 你TM把洞缝上，我尾巴搁哪儿？搁哪儿？搁哪儿？ No.5记得刚升中学那会儿，我发现自己的胸部微微隆起感觉好害怕。现在大学马上毕业了，看着自己微微隆起的胸部，觉得更害怕了！ No.6“站住，你穿裙子考试，是不是把小抄写在大腿上了！” “…老师～这都能被您猜到，莫…莫非您是过来人？” “过来人个屁啊，全学校就你一个考试时候特意穿条裙子的男生！” No.7“你在学校里打过架么？”必须打过呀？”“那，那你赔人家钱了么？”“咋个意思，挨打还要赔钱么？ No.6邻居大姐被狗咬了，我去慰问。她:“我遛狗呢，别的狗想非礼我家的狗，我踢那狗一脚，它想咬我，我拉着我的狗就跑，没想被自己家的狗咬了一口。”我:…… No.6昨晚因为老婆想换新衣柜，我不同意。我们吵了一架。正吵到气头上，我很想打些什么东西来发泄怒气，脑子一抽就一拳轰向了衣柜门……结果破了老大一个洞。唉！这一架算是白吵了 No.7 去年在中铁做财务的时候，一个新建项目的经理去总部要人，由于工地上基本都是男的，女生特别少，所以特别抢手，这个项目经理还没有要到一个女生，悲苦地说：“领导啊，给我们分个女生吧，不然我们的女厕所都白建了……” No.8朋友手腕摔伤了，医生刚给捆上厚厚的绷带，朋友媳妇就一脸紧张的看着医生“大夫啊，这…这不影响他洗碗吧？” No.9某人喜得贵子，希望儿子将来可以走上人生巅峰，决定给儿子起名叫巅峰，谁知朋友在旁边劝道：老杨，你快别闹了","comments":true,"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"关于人性的小故事","date":"2017-02-08T01:37:27.000Z","path":"2017/02/08/human-nature/","text":"故事一 大概是用一生陪你六十载，最后也抵不过一个钱字吧。 No.1小学的时候，上数学课，发考试试卷，我知道我肯定没考好，结果发着发着，我被吓尿了……是真尿了，滴答滴答的……尴尬地一匹，然后同桌把他喝的水直接倒到我裤子上，直对我说对不起，对不起……这一刻，我看到了人性的光辉……","comments":true,"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"经典语录集锦","date":"2017-02-07T09:48:25.000Z","path":"2017/02/07/yulu/","text":"语录集锦 人心如叶片 一生一落，一落一生 不要轻易动心，不动则不伤 人心是容器 时常刷新，时常清空 才会面朝阳光，轻装而行 当一个人忽略你时，不要伤心，每个人都有自己的生活，谁都不可能一直陪你。最尴尬的莫过于高估自己在别人心里的位置，其实你明明知道，最卑贱不过感情，最凉不过人心。 做人没有十全十美的，免不了被人指手画脚，我做事用不着所有人都点头，我活着就是让讨厌我的人越来越不爽！ 能把感情这种东西嚼碎了咽下去 那你就是王者 美好的爱情就是一个臭不要脸一个假装矜持，千万不要等到臭不要脸的那个走了，假装矜持的那个才哭。 暧昧不清的关系 无非就是想占有但不想负责人 要有多幸运你喜欢的人恰好也喜欢你 感情，怕的是一个人忙，一个人闲，一个人圈子大，而另一个人只有ta，一个人心思敏感，另一个人不爱解释。真爱是可遇而不可求的，最牢固的感情不是“我爱你”，而是“我习惯了有你”。 梦想不多 兜里有糖 肚里有墨 手里有活 卡里有钱 未来有你 女人需要扔掉的三样东西：“过了时的衣服，玩心眼的姐妹，光说不做的男人！一个真正喜欢你的人会信守承诺” 男人谨记：喜欢就去买！没钱就去赚！青春那么短，磕碜给谁看？你什么都舍不得扔，还谈什么生活质量 ————致女人 忠于你的梦想 别管它能不能发光 迟些遇见吧 你刚好成熟我刚好温柔 我不奢求人生顺风顺水 但求坎坷走进有人陪 我不羡慕街上热吻的情侣 我只羡慕深巷里牵手的老人 所有幸运和巧合的事 要么是上天注定 要么是一个人偷偷的在努力 心理学上说，如果一个人特别爱笑，说明他内心深处很悲伤，如果一个人很能睡，则说明他很孤单 我们又太多的凑巧 却唯独缺一个正好 爱你的人会挤出时间陪你 因为你比什么都重要 不要因为别人说了你想听的话 就相信他们 失去的多了就成熟了吗 只是麻木了吧 戳到痛处的玩笑 从来都不是玩笑 未完，待续…","comments":true,"tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"Hexo+Github，搭建属于自己的博客","date":"2017-02-07T03:15:58.000Z","path":"2017/02/07/hexo-github/","text":"正文： hexo是一款基于Node.js的静态博客框架, hexo github链接 ,这篇教程是针对与Mac的，参考链接，由于原文讲到的hexo是以前的老版本，所以现在的版本配置的时候会有些改动。 之前是想着写博客，一方面是给自己做笔记，可以提升自己的写作、总结能力，一个技术点我们会使用，并不难，但是要做到让让别人也能听懂我们讲得，还是需要一定的技巧和经验的。很多类似于CSDN、博客园也都可以写文章，但是页面的样式我，不是太喜欢，简书还算好点得。最近看到一些大神们的博客,貌似都是用hexo写得,我也依葫芦画瓢的搭建了一个。不罗嗦了，直接上搭建步骤。 配置文件安装Node（必须）作用：用来生成静态页面的到Node.js官网官网下载相应平台的最新版本，一路安装即可。安装Git（必须）作用：把本地的hexo内容提交到github上去.安装Xcode就自带有Git，我就不多说了。申请GitHub（必须）作用：是用来做博客的远程创库、域名、服务器之类的，怎么与本地hexo建立连接等下讲。github账号我也不再啰嗦了,没有的话直接申请就行了，跟一般的注册账号差不多，SSH Keys，看你自己了，可以不配制，不配置的话以后每次对自己的博客有改动提交的时候就要手动输入账号密码，配置了就不需要了，怎么配置我就不多说了，网上有很多教程。 正式安装HexoNode和Git都安装好后,首先创建一个文件夹,如blog,用户存放hexo的配置文件,然后进入blog里安装Hexo。执行如下命令安装Hexo：sudo npm install -g hexo 初始化然后，执行init命令初始化hexo,命令：hexo init 好啦，至此，全部安装工作已经完成！blog就是你的博客根目录，所有的操作都在里面进行。生成静态页面hexo generate（hexo g也可以） 本地启动启动本地服务，进行文章预览调试，命令：hexo server 浏览器输入http://localhost:4000我不知道你们能不能，反正我不能，因为我还有环境没配置好 配置Github建立Repository建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法然后建立关联，我的blog在本地/Users/leopard/blog，blog是我之前建的东西也全在这里面，有： _config.yml node_modules public source db.json package.json scaffolds themes 现在我们需要_config.yml文件，来建立关联，命令：vim _config.yml 翻到最下面，改成我这样子的deploy: type: git repo: https://github.com/leopardpan/leopardpan.github.io.git branch: master 然后执行命令：npm install hexo-deployer-git –save 网上会有很多说法，有的type是github, 还有repository最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.1.1，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。忘了说了，我没用SSH Keys如果你用了SSH Keys的话直接在github里复制SSH的就行了，总共就两种协议，相信你懂的。然后，执行配置命令：hexo deploy 然后再浏览器中输入http://leopardpan.github.io/ 就行了，我的github的账户叫leopardpan,把这个改成你github的账户名就行了部署步骤每次部署的步骤，可按以下三步来进行。 hexo clean hexo generate hexo deploy 一些常用命令：hexo new”postName” #新建文章hexo new page”pageName” #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）hexo deploy #将.deploy目录部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 报错总结ERROR Deployer not found: git 或者 ERROR Deployer not found: github解决方法： npm install hexo-deployer-git –save 如发生报错： ERROR Process failed: layout/.DS_Store , 那么进入主题里面layout和_partial目录下，使用删除命令：rm-rf.DS_Store ERROR Plugin load failed: hexo-server原因：Besides,utilities are separated into a standalone module.hexo.util is not reachable anymore.解决方法，执行命令：sudo npm install hexo-server 执行命令hexo server，提示：Usage: hexo ….原因：我认为是没有生成本地服务解决方法，执行命令：npm install hexo-server –save 提示：hexo-server@0.1.2 node_modules/hexo-server 表示成功了参考这个时候再执行：hexo-server 得到:INFOHexois running at http://0.0.0.0:4000/. PressCtrl+C to stop.这个时候再点击http://0.0.0.0:4000， 正常情况下应该是最原始的画面，但是我看到的是：白板和Cannot GET / 几个字原因：由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令： npm install hexo-renderer-ejs –save npm install hexo-renderer-stylus –save npm install hexo-renderer-marked –save 这个时候再重新生成静态文件，命令：hexo generate（或hexo g） 启动本地服务器：hexo server（或hexo s） 再，点击网址http://0.0.0.0:4000 OK终于可以看到属于你自己的blog啦，😄，虽然很简陋，但好歹有了一个属于自己的小窝了。参考链接，本地已经简单的设置好了，但是现在域名和服务器都是基于自己的电脑，接下来需要跟github进行关联。 主题推荐这里有大量的主题列表主题列表使用方法里面都有详细的介绍，我就不多说了。 一些基本路径文章在source/_posts, 文章支持Markdown语法，可以使用一些MarkDown渲染工具。如果想修改头像可以直接在主题的_config.yml文件里面修改，友情链接，之类的都在这里。开始打理你的博客吧，有什么问题或者建议，都可以提出来，我会继续完善的。 修改头像我当前的路径/Users/leopard/blog/themes/yilia，ls 你可以看到Gruntfile.js _config.yml package.json README.md layout sourcevim _config.yml 进去，找到 #你的头像url avatar: 后接一个URL就行了，头像就修改成功了修改主题和作者名字我当前的路径/Users/leopard/blog，ls 你可以看到_config.yml node_modules public source themes db.json package.json scaffolds ssh-keygenvim _config.yml 进去，找到 author: 潘柏信，修改成你自己的名字就行了修改主题，然后继续往下找到 ExtensionsPlugins: http://hexo.io/plugins/Themes: http://hexo.io/themes/theme:yilia改成theme: yilia，theme:后面接你自己的主题名字就行了,然后分别执行部署 hexo g提交 hexo d你的主题，和名字就修改成功了Markdown语法参考链接链接1 转载地址：潘柏信的博客：http://leopardpan.github.io","comments":true,"tags":[{"name":"-技术相关","slug":"技术相关","permalink":"http://yoursite.com/tags/技术相关/"}]},{"title":"css","date":"2017-02-07T02:12:40.000Z","path":"2017/02/07/css/","text":"","comments":true,"tags":[{"name":"-技术相关","slug":"技术相关","permalink":"http://yoursite.com/tags/技术相关/"}]},{"title":"git常用命令整理","date":"2017-02-06T01:32:07.000Z","path":"2017/02/06/git/","text":"1.新建代码库在当前目录新建一个Git代码库git init 新建一个目录，将其初始化为Git代码库git init [project-name] 下载一个项目和它的整个代码历史git clone [url] 2.配置 Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。显示当前的Git配置git config –list 编辑Git配置文件git config -e [–global] 设置提交代码时的用户信息git config [–global] user.name “[name]”git config [–global] user.email “[email address]” 3.增加/删除文件添加指定文件到暂存区git add [file1] [file2] … 添加指定目录到暂存区，包括子目录git add [dir] 添加当前目录的所有文件到暂存区git add . 添加每个变化前，都会要求确认对于同一个文件的多处变化，可以实现分次提交git add -p 删除工作区文件，并且将这次删除放入暂存区git rm [file1] [file2] … 停止追踪指定文件，但该文件会保留在工作区git rm –cached [file] 改名文件，并且将这个改名放入暂存区git mv [file-original] [file-renamed] 4.代码提交提交暂存区到仓库区git commit -m [message] 提交暂存区的指定文件到仓库区git commit [file1] [file2] … -m [message] 提交工作区自上次commit之后的变化，直接到仓库区git commit -a 提交时显示所有diff信息git commit -v 使用一次新的commit，替代上一次提交如果代码没有任何新变化，则用来改写上一次commit的提交信息git commit –amend -m [message] 重做上一次commit，并包括指定文件的新变化git commit –amend [file1] [file2] … 5.分支列出所有本地分支git branch 列出所有远程分支git branch -r 新建一个分支，但依然停留在当前分支git branch [branch-name] 新建一个分支，并切换到该分支git checkout -b [branch] 新建一个分支，指向指定commitgit branch [branch] [commit] 新建一个分支，与指定的远程分支建立追踪关系git branch –track [branch] [remote-branch] 切换到指定分支，并更新工作区git checkout [branch-name] 切换到上一个分支git checkout - 建立追踪关系，在现有分支与指定的远程分支之间git branch –set-upstream [branch] [remote-branch] 合并指定分支到当前分支git merge [branch] 选择一个commit，合并进当前分支git cherry-pick [commit] 删除分支git branch -d [branch-name] 删除远程分支git push origin –delete [branch-name]git branch -dr [remote/branch] 6.标签列出所有taggit tag 新建一个tag在当前commitgit tag [tag] 新建一个tag在指定commitgit tag [tag] [commit] 删除本地taggit tag -d [tag] 删除远程taggit push origin :refs/tags/[tagName] 查看tag信息git show [tag] 提交指定taggit push [remote] [tag] 提交所有taggit push [remote] –tags 新建一个分支，指向某个taggit checkout -b [branch] [tag] 7.查看信息显示有变更的文件git status 显示当前分支的版本历史git log 显示commit历史，以及每次commit发生变更的文件git log –stat 搜索提交历史，根据关键词git log -S [keyword] 显示某个commit之后的所有变动，每个commit占据一行git log [tag] HEAD –pretty=format:%s 显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件git log [tag] HEAD –grep feature 显示某个文件的版本历史，包括文件改名git log –follow [file]git whatchanged [file] 显示指定文件相关的每一次diffgit log -p [file] 显示过去5次提交git log -5 –pretty –oneline 显示所有提交过的用户，按提交次数排序git shortlog -sn 显示指定文件是什么人在什么时间修改过git blame [file] 显示暂存区和工作区的差异git diff 显示暂存区和上一个commit的差异git diff –cached [file] 显示工作区与当前分支最新commit之间的差异git diff HEAD 显示两次提交之间的差异git diff [first-branch]…[second-branch] 显示今天你写了多少行代码git diff –shortstat “@{0 day ago}” 显示某次提交的元数据和内容变化git show [commit] 显示某次提交发生变化的文件git show –name-only [commit] 显示某次提交时，某个文件的内容git show [commit]:[filename] 显示当前分支的最近几次提交git reflog 8.远程同步下载远程仓库的所有变动git fetch [remote] 显示所有远程仓库git remote -v 显示某个远程仓库的信息git remote show [remote] 增加一个新的远程仓库，并命名git remote add [shortname] [url] 取回远程仓库的变化，并与本地分支合并git pull [remote] [branch] 上传本地指定分支到远程仓库git push [remote] [branch] 强行推送当前分支到远程仓库，即使有冲突git push [remote] –force 推送所有分支到远程仓库git push [remote] –all 9.撤销恢复暂存区的指定文件到工作区git checkout [file] 恢复某个commit的指定文件到暂存区和工作区git checkout [commit] [file] 恢复暂存区的所有文件到工作区git checkout . 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变git reset [file] 重置暂存区与工作区，与上一次commit保持一致git reset –hard 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变git reset [commit] 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致git reset –hard [commit] 重置当前HEAD为指定commit，但保持暂存区和工作区不变git reset –keep [commit] 新建一个commit，用来撤销指定commit后者的所有变化都将被前者抵消，并且应用到当前分支git revert [commit] 暂时将未提交的变化移除，稍后再移入git stashgit stash pop 10.其他生成一个可供发布的压缩包git archive","comments":true,"tags":[{"name":"-技术相关","slug":"技术相关","permalink":"http://yoursite.com/tags/技术相关/"}]}]